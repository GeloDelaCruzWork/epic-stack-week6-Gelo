Payslip printing

Server-rendered PDF from HTML (Headless Chromium: Puppeteer/Playwright) 
Render a normal React/Remix HTML page and convert to PDF on the server.
Pros: pixel-consistent, supports full CSS (incl. @page), easy to template, easy 2-up layout, barcodes/QR, logos.
Cons: need Chromium binary (trivial on EC2/Fargate; on Lambda use @sparticuz/chromium with puppeteer-core).

add email column to Employee, re-seed if necessary
Need to seed EmployeePayslip for example payPeriod September 16-30
use seeded Employee records

Use server-rendered PDFs via Headless Chromium (Puppeteer/Playwright).
Why: You get HTML+Tailwind authoring speed, consistent A4 output, and precise 2-per-page imposition. It’s easy to support “print 20 guards (2 per sheet)” and to add a verification QR/barcode.

Architecture sketch

UI: an admin page to select guards/pay period → hit “Generate PDF”.

Remix route (e.g., /payslips/print?ids=...&period=2025-09-01):

loader fetches data from Aurora (via Prisma).

Renders a printable React page (<PayslipPage>) with Tailwind.

PDF endpoint (e.g., /payslips.pdf?ids=...&period=...):

Server launches headless Chromium, navigates to the HTML route above with the same query, and calls page.pdf({ format: 'A4' ... }).

Streams application/pdf to the browser for download or direct print.

Batching: HTML lays out two .payslip components per physical A4 page. CSS controls page breaks.

CSS for “2 payslips per A4 page”

Add a dedicated print stylesheet to your printable route:

/* app/styles/print.css */
/* A4 portrait with controlled margins */
@page {
  size: A4;
  margin: 10mm;
}

@media print {
  html, body { height: auto; }
  /* Each physical page contains two slips stacked vertically */
  .sheet {
    display: grid;
    grid-template-rows: 1fr 1fr;
    gap: 8mm;           /* space between the two slips */
    page-break-after: always;
  }

  .payslip {
    /* thin border helps cutting; keep fonts small to fit */
    font-size: 11px;
    border: 1px solid #000;
    padding: 6mm;
  }
}

/* On screen, show A4 preview width for WYSIWYG feel */
.preview {
  width: 210mm; /* A4 width */
  margin: 0 auto;
}

React layout pattern (HTML route)

/payslips/print.tsx

// pseudo-code: app/routes/payslips.print.tsx
import { json, type LoaderFunctionArgs } from "@remix-run/node";
import { useLoaderData } from "@remix-run/react";
// import your prisma client

export async function loader({ request }: LoaderFunctionArgs) {
  const url = new URL(request.url);
  const ids = url.searchParams.getAll("id"); // ?id=1&id=2...
  const period = url.searchParams.get("period");
  // Fetch guards + computed pay for the period
  const data = await getPayslipData(ids, period); // from Aurora via Prisma
  // Chunk into groups of 2 to form "sheets"
  const sheets = [];
  for (let i = 0; i < data.length; i += 2) sheets.push(data.slice(i, i + 2));
  return json({ sheets, period });
}

export default function PayslipsPrint() {
  const { sheets, period } = useLoaderData<typeof loader>();
  return (
    <div className="preview">
      {sheets.map((pair, i) => (
        <div className="sheet" key={i}>
          {pair.map((slip) => (
            <div className="payslip" key={slip.guardId}>
              <Header slip={slip} period={period} />
              <Earnings slip={slip} />
              <Deductions slip={slip} />
              <NetPay slip={slip} />
              {/* Optional: <QRCode value={slip.verificationUrl} /> */}
              {/* Optional: signature box / notes */}
            </div>
          ))}
          {/* If only one in last pair, render an empty block to keep layout clean */}
          {pair.length === 1 ? <div className="payslip" /> : null}
        </div>
      ))}
    </div>
  );
}

PDF route using Puppeteer on the server

/payslips.pdf.tsx (action-like resource route)

// pseudo-code: app/routes/payslips.pdf.ts
import { type LoaderFunctionArgs } from "@remix-run/node";
import chromium from "@sparticuz/chromium";       // for Lambda; on EC2 use puppeteer
import puppeteer from "puppeteer-core";

export async function loader({ request }: LoaderFunctionArgs) {
  const url = new URL(request.url);
  const query = url.search; // preserve ?id=...&period=...
  const origin = `${url.protocol}//${url.host}`;
  const target = `${origin}/payslips/print${query}`;

  const executablePath =
    process.env.AWS_LAMBDA_FUNCTION_VERSION
      ? await chromium.executablePath()
      : undefined; // on EC2/Fargate use full Puppeteer and omit this

  const browser = await puppeteer.launch({
    args: chromium.args,
    defaultViewport: chromium.defaultViewport,
    executablePath,
    headless: chromium.headless,
  });
  const page = await browser.newPage();
  await page.goto(target, { waitUntil: "networkidle0" });

  const pdf = await page.pdf({
    format: "A4",
    printBackground: true,
    margin: { top: "10mm", right: "10mm", bottom: "10mm", left: "10mm" },
  });
  await browser.close();

  return new Response(pdf, {
    headers: {
      "Content-Type": "application/pdf",
      "Content-Disposition": `inline; filename="payslips.pdf"`,
      "Cache-Control": "no-store",
    },
  });
}


Deploy targets

A. prod: EC2/Fargate: use full puppeteer (bundles Chromium) — simplest.
Lambda: use puppeteer-core + @sparticuz/chromium (small binary built for Lambda).

B. local dev: Windows machines
need your help here

Batch workflow
UI lets you select ~20 guards → click Generate PDF → we open /payslips.pdf?period=...&id=...&id=....
PDF renders with 2 per page.
You can print immediately (browser dialog) or save & email.

Security, integrity, and verification
Include a QR code (verification link) that opens a readonly slip page.
Embed a small hash/signature of the slip payload in the QR (or URL parameter), verified server-side.
Watermark “DRAFT” for unapproved runs; “PAID” when disbursed.


payslip priniting spec.txt